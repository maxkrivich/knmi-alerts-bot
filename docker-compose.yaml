services:
  redis:
    image: redis:7.4-alpine
    container_name: redis
  knmi_checker:
    build: ./report_checker
    container_name: knmi_checker
    restart: always
    secrets:
      - notification_token
      - notification_client_id
      - open_data_api_token
    environment:
      - REDIS_CHANNEL=knmi_alerts
    depends_on:
      - redis
  telegram_notifier:
    build: ./notifier
    container_name: telegram_notifier
    restart: always
    environment:
      - REDIS_CHANNEL=knmi_alerts
      - API_URL=http://db_api:3000
    secrets:
      - telegram_bot_token
      - debug_chat_id
    depends_on:
      - redis
  telegram_bot:
    build: ./knmi_bot
    container_name: telegram_bot
    restart: always
    secrets:
      - telegram_bot_token
    environment:
      - API_URL=http://db_api:3000
  postgres_api:
    image: postgrest/postgrest:v12.2.3
    container_name: db_api
    ports:
      - "3000:3000"
    environment:
      PGRST_DB_URI: postgres://app_user:password@db:5432/app_db?user=app_user&password=password
      PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:3000
      PGRST_DB_ANON_ROLE: app_user
      PGRST_DB_SCHEMA: public
    depends_on:
      - db
  db:
    image: postgres:17-alpine
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data
      - ./schema/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_DB: app_db
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: password


secrets:
  notification_token:
    environment: KNMI_NOTIFICATION_TOKEN
  notification_client_id:
    environment: KNMI_NOTIFICATION_CLIENT_ID
  open_data_api_token:
    environment: KNMI_OPEN_DATA_API_TOKEN
  telegram_bot_token:
    environment: TELEGRAM_BOT_TOKEN
  debug_chat_id:
    environment: MY_CHAT_ID

volumes:
  db:
    driver: local
